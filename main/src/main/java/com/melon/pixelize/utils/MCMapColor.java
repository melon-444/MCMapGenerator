package com.melon.pixelize.utils;

public enum MCMapColor implements ColorEnumTemplate {

    /*
    NULL,

    NONE_LOW(null, 0, 0),
    NONE_NORMAL(null, 0, 1),
    NONE_RASS_HIGH(null, 0, 2),
    NONE_LOWEST(null, 0, 3),
     */

    GRASS_LOW(0x597D27, 1, 0),
    GRASS_NORMAL(0x6D9930, 1, 1),
    GRASS_HIGH(0x7FB238, 1, 2),
    GRASS_LOWEST(0x435E1D, 1, 3),

    SAND_LOW(0xAEA473, 2, 0),
    SAND_NORMAL(0xD5C98C, 2, 1),
    SAND_HIGH(0xF7E9A3, 2, 2),
    SAND_LOWEST(0x827B56, 2, 3),

    WOOL_LOW(0x8C8C8C, 3, 0),
    WOOL_NORMAL(0xABABAB, 3, 1),
    WOOL_HIGH(0xC7C7C7, 3, 2),
    WOOL_LOWEST(0x696969, 3, 3),

    FIRE_LOW(0xB40000, 4, 0),
    FIRE_NORMAL(0xDC0000, 4, 1),
    FIRE_HIGH(0xFF0000, 4, 2),
    FIRE_LOWEST(0x870000, 4, 3),

    ICE_LOW(0x7070B4, 5, 0),
    ICE_NORMAL(0x8A8ADC, 5, 1),
    ICE_HIGH(0xA0A0FF, 5, 2),
    ICE_LOWEST(0x545487, 5, 3),

    METAL_LOW(0x757575, 6, 0),
    METAL_NORMAL(0x909090, 6, 1),
    METAL_HIGH(0xA7A7A7, 6, 2),
    METAL_LOWEST(0x585858, 6, 3),

    PLANT_LOW(0x005700, 7, 0),
    PLANT_NORMAL(0x006A00, 7, 1),
    PLANT_HIGH(0x007C00, 7, 2),
    PLANT_LOWEST(0x004100, 7, 3),

    SNOW_LOW(0xB4B4B4, 8, 0),
    SNOW_NORMAL(0xDCDCDC, 8, 1),
    SNOW_HIGH(0xFFFFFF, 8, 2),
    SNOW_LOWEST(0x878787, 8, 3),

    CLAY_LOW(0x737681, 9, 0),
    CLAY_NORMAL(0x8D909E, 9, 1),
    CLAY_HIGH(0xA4A8B8, 9, 2),
    CLAY_LOWEST(0x565861, 9, 3),

    DIRT_LOW(0x6A4C36, 10, 0),
    DIRT_NORMAL(0x825E42, 10, 1),
    DIRT_HIGH(0x976D4D, 10, 2),
    DIRT_LOWEST(0x4F3928, 10, 3),

    STONE_LOW(0x4F4F4F, 11, 0),
    STONE_NORMAL(0x606060, 11, 1),
    STONE_HIGH(0x707070, 11, 2),
    STONE_LOWEST(0x3B3B3B, 11, 3),

    WATER_LOW(0x2D2DB4, 12, 0),
    WATER_NORMAL(0x3737DC, 12, 1),
    WATER_HIGH(0x4040FF, 12, 2),
    WATER_LOWEST(0x212187, 12, 3),

    WOOD_LOW(0x645432, 13, 0),
    WOOD_NORMAL(0x7B663E, 13, 1),
    WOOD_HIGH(0x8F7748, 13, 2),
    WOOD_LOWEST(0x4B3F26, 13, 3),

    QUARTZ_LOW(0xB4B1AC, 14, 0),
    QUARTZ_NORMAL(0xDCD9D3, 14, 1),
    QUARTZ_HIGH(0xFFFCF5, 14, 2),
    QUARTZ_LOWEST(0x878581, 14, 3),

    COLOR_ORANGE_LOW(0x985924, 15, 0),
    COLOR_ORANGE_NORMAL(0xBA6D2C, 15, 1),
    COLOR_ORANGE_HIGH(0xD87F33, 15, 2),
    COLOR_ORANGE_LOWEST(0x72431B, 15, 3),

    COLOR_MAGENTA_LOW(0x7D3598, 16, 0),
    COLOR_MAGENTA_NORMAL(0x9941BA, 16, 1),
    COLOR_MAGENTA_HIGH(0xB24CD8, 16, 2),
    COLOR_MAGENTA_LOWEST(0x5E2872, 16, 3),

    COLOR_LIGHT_BLUE_LOW(0x486C98, 17, 0),
    COLOR_LIGHT_BLUE_NORMAL(0x5884BA, 17, 1),
    COLOR_LIGHT_BLUE_HIGH(0x6699D8, 17, 2),
    COLOR_LIGHT_BLUE_LOWEST(0x365172, 17, 3),

    COLOR_YELLOW_LOW(0xA1A124, 18, 0),
    COLOR_YELLOW_NORMAL(0xC5C52C, 18, 1),
    COLOR_YELLOW_HIGH(0xE5E533, 18, 2),
    COLOR_YELLOW_LOWEST(0x79791B, 18, 3),

    COLOR_LIGHT_GREEN_LOW(0x599011, 19, 0),
    COLOR_LIGHT_GREEN_NORMAL(0x6DB015, 19, 1),
    COLOR_LIGHT_GREEN_HIGH(0x7FCC19, 19, 2),
    COLOR_LIGHT_GREEN_LOWEST(0x436C0D, 19, 3),

    COLOR_PINK_LOW(0xAA5974, 20, 0),
    COLOR_PINK_NORMAL(0xD06D8E, 20, 1),
    COLOR_PINK_HIGH(0xF27FA5, 20, 2),
    COLOR_PINK_LOWEST(0x804357, 20, 3),

    COLOR_GRAY_LOW(0x353535, 21, 0),
    COLOR_GRAY_NORMAL(0x414141, 21, 1),
    COLOR_GRAY_HIGH(0x4C4C4C, 21, 2),
    COLOR_GRAY_LOWEST(0x282828, 21, 3),

    COLOR_LIGHT_GRAY_LOW(0x6C6C6C, 22, 0),
    COLOR_LIGHT_GRAY_NORMAL(0x848484, 22, 1),
    COLOR_LIGHT_GRAY_HIGH(0x999999, 22, 2),
    COLOR_LIGHT_GRAY_LOWEST(0x515151, 22, 3),

    COLOR_CYAN_LOW(0x35596C, 23, 0),
    COLOR_CYAN_NORMAL(0x416D84, 23, 1),
    COLOR_CYAN_HIGH(0x4C7F99, 23, 2),
    COLOR_CYAN_LOWEST(0x284351, 23, 3),

    COLOR_PURPLE_LOW(0x592C7D, 24, 0),
    COLOR_PURPLE_NORMAL(0x6D3699, 24, 1),
    COLOR_PURPLE_HIGH(0x7F3FB2, 24, 2),
    COLOR_PURPLE_LOWEST(0x43215E, 24, 3),

    COLOR_BLUE_LOW(0x24357D, 25, 0),
    COLOR_BLUE_NORMAL(0x2C4199, 25, 1),
    COLOR_BLUE_HIGH(0x334CB2, 25, 2),
    COLOR_BLUE_LOWEST(0x1B285E, 25, 3),

    COLOR_BROWN_LOW(0x483524, 26, 0),
    COLOR_BROWN_NORMAL(0x58412C, 26, 1),
    COLOR_BROWN_HIGH(0x664C33, 26, 2),
    COLOR_BROWN_LOWEST(0x36281B, 26, 3),

    COLOR_GREEN_LOW(0x485924, 27, 0),
    COLOR_GREEN_NORMAL(0x586D2C, 27, 1),
    COLOR_GREEN_HIGH(0x667F33, 27, 2),
    COLOR_GREEN_LOWEST(0x36431B, 27, 3),

    COLOR_RED_LOW(0x6C2424, 28, 0),
    COLOR_RED_NORMAL(0x842C2C, 28, 1),
    COLOR_RED_HIGH(0x993333, 28, 2),
    COLOR_RED_LOWEST(0x511B1B, 28, 3),

    COLOR_BLACK_LOW(0x111111, 29, 0),
    COLOR_BLACK_NORMAL(0x151515, 29, 1),
    COLOR_BLACK_HIGH(0x191919, 29, 2),
    COLOR_BLACK_LOWEST(0x0D0D0D, 29, 3),

    GOLD_LOW(0xB0A836, 30, 0),
    GOLD_NORMAL(0xD7CD42, 30, 1),
    GOLD_HIGH(0xFAEE4D, 30, 2),
    GOLD_LOWEST(0x847E28, 30, 3),

    DIAMOND_LOW(0x409A96, 31, 0),
    DIAMOND_NORMAL(0x4FBCB7, 31, 1),
    DIAMOND_HIGH(0x5CDBD5, 31, 2),
    DIAMOND_LOWEST(0x307370, 31, 3),

    LAPIS_LOW(0x345AB4, 32, 0),
    LAPIS_NORMAL(0x3F6EDC, 32, 1),
    LAPIS_HIGH(0x4A80FF, 32, 2),
    LAPIS_LOWEST(0x274387, 32, 3),

    EMERALD_LOW(0x009928, 33, 0),
    EMERALD_NORMAL(0x00BB32, 33, 1),
    EMERALD_HIGH(0x00D93A, 33, 2),
    EMERALD_LOWEST(0x00721E, 33, 3),

    PODZOL_LOW(0x5B3C22, 34, 0),
    PODZOL_NORMAL(0x6F4A2A, 34, 1),
    PODZOL_HIGH(0x815631, 34, 2),
    PODZOL_LOWEST(0x442D19, 34, 3),

    NETHER_LOW(0x4F0100, 35, 0),
    NETHER_NORMAL(0x600100, 35, 1),
    NETHER_HIGH(0x700200, 35, 2),
    NETHER_LOWEST(0x3B0100, 35, 3),

    TERRACOTTA_WHITE_LOW(0x937C71, 36, 0),
    TERRACOTTA_WHITE_NORMAL(0xB4988A, 36, 1),
    TERRACOTTA_WHITE_HIGH(0xD1B1A1, 36, 2),
    TERRACOTTA_WHITE_LOWEST(0x6E5D55, 36, 3),

    TERRACOTTA_ORANGE_LOW(0x703919, 37, 0),
    TERRACOTTA_ORANGE_NORMAL(0x89461F, 37, 1),
    TERRACOTTA_ORANGE_HIGH(0x9F5224, 37, 2),
    TERRACOTTA_ORANGE_LOWEST(0x542B13, 37, 3),

    TERRACOTTA_MAGENTA_LOW(0x693D4C, 38, 0),
    TERRACOTTA_MAGENTA_NORMAL(0x804B5D, 38, 1),
    TERRACOTTA_MAGENTA_HIGH(0x95576C, 38, 2),
    TERRACOTTA_MAGENTA_LOWEST(0x4E2E39, 38, 3),

    TERRACOTTA_LIGHT_BLUE_LOW(0x4F4C61, 39, 0),
    TERRACOTTA_LIGHT_BLUE_NORMAL(0x605D77, 39, 1),
    TERRACOTTA_LIGHT_BLUE_HIGH(0x706C8A, 39, 2),
    TERRACOTTA_LIGHT_BLUE_LOWEST(0x3B3949, 39, 3),

    TERRACOTTA_YELLOW_LOW(0x835D19, 40, 0),
    TERRACOTTA_YELLOW_NORMAL(0xA0721F, 40, 1),
    TERRACOTTA_YELLOW_HIGH(0xBA8524, 40, 2),
    TERRACOTTA_YELLOW_LOWEST(0x624613, 40, 3),

    TERRACOTTA_LIGHT_GREEN_LOW(0x485225, 41, 0),
    TERRACOTTA_LIGHT_GREEN_NORMAL(0x58642D, 41, 1),
    TERRACOTTA_LIGHT_GREEN_HIGH(0x677535, 41, 2),
    TERRACOTTA_LIGHT_GREEN_LOWEST(0x363D1C, 41, 3),

    TERRACOTTA_PINK_LOW(0x703637, 42, 0),
    TERRACOTTA_PINK_NORMAL(0x8A4243, 42, 1),
    TERRACOTTA_PINK_HIGH(0xA04D4E, 42, 2),
    TERRACOTTA_PINK_LOWEST(0x542829, 42, 3),

    TERRACOTTA_GRAY_LOW(0x281C18, 43, 0),
    TERRACOTTA_GRAY_NORMAL(0x31231E, 43, 1),
    TERRACOTTA_GRAY_HIGH(0x392923, 43, 2),
    TERRACOTTA_GRAY_LOWEST(0x1E1512, 43, 3),

    TERRACOTTA_LIGHT_GRAY_LOW(0x5F4B45, 44, 0),
    TERRACOTTA_LIGHT_GRAY_NORMAL(0x745C54, 44, 1),
    TERRACOTTA_LIGHT_GRAY_HIGH(0x876B62, 44, 2),
    TERRACOTTA_LIGHT_GRAY_LOWEST(0x473833, 44, 3),

    TERRACOTTA_CYAN_LOW(0x3D4040, 45, 0),
    TERRACOTTA_CYAN_NORMAL(0x4B4F4F, 45, 1),
    TERRACOTTA_CYAN_HIGH(0x575C5C, 45, 2),
    TERRACOTTA_CYAN_LOWEST(0x2E3030, 45, 3),

    TERRACOTTA_PURPLE_LOW(0x56333E, 46, 0),
    TERRACOTTA_PURPLE_NORMAL(0x693E4B, 46, 1),
    TERRACOTTA_PURPLE_HIGH(0x7A4958, 46, 2),
    TERRACOTTA_PURPLE_LOWEST(0x40262E, 46, 3),

    TERRACOTTA_BLUE_LOW(0x352B40, 47, 0),
    TERRACOTTA_BLUE_NORMAL(0x41354F, 47, 1),
    TERRACOTTA_BLUE_HIGH(0x4C3E5C, 47, 2),
    TERRACOTTA_BLUE_LOWEST(0x282030, 47, 3),

    TERRACOTTA_BROWN_LOW(0x352318, 48, 0),
    TERRACOTTA_BROWN_NORMAL(0x412B1E, 48, 1),
    TERRACOTTA_BROWN_HIGH(0x4C3223, 48, 2),
    TERRACOTTA_BROWN_LOWEST(0x281A12, 48, 3),

    TERRACOTTA_GREEN_LOW(0x35391D, 49, 0),
    TERRACOTTA_GREEN_NORMAL(0x414624, 49, 1),
    TERRACOTTA_GREEN_HIGH(0x4C522A, 49, 2),
    TERRACOTTA_GREEN_LOWEST(0x282B16, 49, 3),

    TERRACOTTA_RED_LOW(0x642A20, 50, 0),
    TERRACOTTA_RED_NORMAL(0x7A3327, 50, 1),
    TERRACOTTA_RED_HIGH(0x8E3C2E, 50, 2),
    TERRACOTTA_RED_LOWEST(0x4B1F18, 50, 3),

    TERRACOTTA_BLACK_LOW(0x1A0F0B, 51, 0),
    TERRACOTTA_BLACK_NORMAL(0x1F120D, 51, 1),
    TERRACOTTA_BLACK_HIGH(0x251610, 51, 2),
    TERRACOTTA_BLACK_LOWEST(0x130B08, 51, 3),

    CRIMSON_NYLIUM_LOW(0x852122, 52, 0),
    CRIMSON_NYLIUM_NORMAL(0xA3292A, 52, 1),
    CRIMSON_NYLIUM_HIGH(0xBD3031, 52, 2),
    CRIMSON_NYLIUM_LOWEST(0x641919, 52, 3),

    CRIMSON_STEM_LOW(0x682C44, 53, 0),
    CRIMSON_STEM_NORMAL(0x7F3653, 53, 1),
    CRIMSON_STEM_HIGH(0x943F61, 53, 2),
    CRIMSON_STEM_LOWEST(0x4E2133, 53, 3),

    CRIMSON_HYPHAE_LOW(0x401114, 54, 0),
    CRIMSON_HYPHAE_NORMAL(0x4F1519, 54, 1),
    CRIMSON_HYPHAE_HIGH(0x5C191D, 54, 2),
    CRIMSON_HYPHAE_LOWEST(0x300D0F, 54, 3),

    WARPED_NYLIUM_LOW(0x0F585E, 55, 0),
    WARPED_NYLIUM_NORMAL(0x126C73, 55, 1),
    WARPED_NYLIUM_HIGH(0x167E86, 55, 2),
    WARPED_NYLIUM_LOWEST(0x0B4246, 55, 3),

    WARPED_STEM_LOW(0x286462, 56, 0),
    WARPED_STEM_NORMAL(0x327A78, 56, 1),
    WARPED_STEM_HIGH(0x3A8E8C, 56, 2),
    WARPED_STEM_LOWEST(0x1E4B4A, 56, 3),

    WARPED_HYPHAE_LOW(0x3C1F2B, 57, 0),
    WARPED_HYPHAE_NORMAL(0x4A2535, 57, 1),
    WARPED_HYPHAE_HIGH(0x562C3E, 57, 2),
    WARPED_HYPHAE_LOWEST(0x2D1720, 57, 3),

    WARPED_WART_BLOCK_LOW(0x0E7F5D, 58, 0),
    WARPED_WART_BLOCK_NORMAL(0x119B72, 58, 1),
    WARPED_WART_BLOCK_HIGH(0x14B485, 58, 2),
    WARPED_WART_BLOCK_LOWEST(0x0A5F46, 58, 3),

    DEEPSLATE_LOW(0x464646, 59, 0),
    DEEPSLATE_NORMAL(0x565656, 59, 1),
    DEEPSLATE_HIGH(0x646464, 59, 2),
    DEEPSLATE_LOWEST(0x343434, 59, 3),

    RAW_IRON_LOW(0x987B67, 60, 0),
    RAW_IRON_NORMAL(0xBA967E, 60, 1),
    RAW_IRON_HIGH(0xD8AF93, 60, 2),
    RAW_IRON_LOWEST(0x725C4D, 60, 3),

    GLOW_LICHEN_LOW(0x597569, 61, 0),
    GLOW_LICHEN_NORMAL(0x6D9081, 61, 1),
    GLOW_LICHEN_HIGH(0x7FA796, 61, 2),
    GLOW_LICHEN_LOWEST(0x43584F, 61, 3);

    final int rgb, base, modifier;

    private MCMapColor() {
        this(0x000000);// black as default.
    }

    private MCMapColor(int color) {
        this(color, 0, 0);
    }

    private MCMapColor(int color, int base, int modifier) {
        rgb = color;
        this.base = base;
        this.modifier = modifier;
    }

    public int getBase() {
        return base;
    }

    public int getModifier() {
        return modifier;
    }

    public int getR() {
        return (rgb >> 16) & 0xff;
    }

    public int getG() {
        return (rgb >> 8) & 0xff;
    }

    public int getB() {
        return rgb & 0xff;
    }

    public int getRGB() {
        return rgb;
    }

    /**
     * About this method:
     * 
     * public static int getBaseColor(byte mapColor) {
     * return (((int) mapColor) & 0xFF) >> 2;
     * }
     * 
     * public static int getModifier(byte mapColor) {
     * return mapColor & 3;
     * }
     * 
     * @param baseColor the color enumeration value
     * @param modifier  the slight modification(multiply) based on base color
     *                  value(0-3, 0 for 180⁄255, 1 for 220⁄255, 2 for 1(no
     *                  modification), 3 for 135⁄255)
     * @return the enumerated color byte
     */

    public static byte getMapColor(int baseColor, int modifier) {
        return (byte) (baseColor << 2 | modifier & 3);
    }

    public static MCMapColor getColorByRGBVal(int color) {
        int r = (color >> 16) & 0xff, g = (color >> 8) & 0xff, b = color & 0xff;

        int similarIndex = r * r + g * g + b * b;
        /*
         * I mean that
         * 
         * int similarIndex =
         * Math.abs(r - Color.black.getR())^2 +
         * Math.abs(g - Color.black.getG())^2 +
         * Math.abs(b - Color.black.getB())^2;
         */

        MCMapColor candidateColor = MCMapColor.COLOR_BLACK_LOWEST;
        for (MCMapColor clr : MCMapColor.values()) {
            if (clr == COLOR_BLACK_LOWEST)
                continue;
            int nextSimilarIndex = ColorEnumTemplate.colorDistance(r, g, b, clr);
            if (nextSimilarIndex < similarIndex) {
                similarIndex = nextSimilarIndex;
                candidateColor = clr;
            }
        }
        return candidateColor;
    }
}